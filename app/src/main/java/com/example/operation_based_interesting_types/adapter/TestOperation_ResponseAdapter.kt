//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.5.1-SNAPSHOT'.
//
package com.example.operation_based_interesting_types.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.operation_based_interesting_types.TestOperation
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestOperation_ResponseAdapter {
  public object Data : Adapter<TestOperation.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("something", "somethingWithoutInterestingType")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.Data {
      var _something: TestOperation.Data.ISomething? = null
      var _somethingWithoutInterestingType: TestOperation.Data.SomethingWithoutInterestingType? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _something = ISomething.obj(true).nullable().fromJson(reader, customScalarAdapters)
          1 -> _somethingWithoutInterestingType = SomethingWithoutInterestingType.obj().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.Data(
        something = _something,
        somethingWithoutInterestingType = _somethingWithoutInterestingType
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.Data,
    ): Unit {
      writer.name("something")
      ISomething.obj(true).nullable().toJson(writer, customScalarAdapters, value.something)

      writer.name("somethingWithoutInterestingType")
      SomethingWithoutInterestingType.obj().nullable().toJson(writer, customScalarAdapters,
          value.somethingWithoutInterestingType)
    }

    private object ISomething : Adapter<TestOperation.Data.ISomething> {
      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestOperation.Data.ISomething {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human2",
          "Droid",
          -> ThingWithNameSomething.fromJson(reader, customScalarAdapters, __typename)
          "Human",
          -> HumanThingWithNameSomething.fromJson(reader, customScalarAdapters, __typename)
          else
          -> Something.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.ISomething,
      ): Unit {
        when(value) {
          is TestOperation.Data.ThingWithNameSomething -> ThingWithNameSomething.toJson(writer,
              customScalarAdapters, value)
          is TestOperation.Data.HumanThingWithNameSomething ->
              HumanThingWithNameSomething.toJson(writer, customScalarAdapters, value)
          is TestOperation.Data.Something -> Something.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object ThingWithNameSomething {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.ThingWithNameSomething {
        var __typename: String? = typename
        var _id: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onHuman: TestOperation.Data.Something.OnHuman? = null
        if (possibleTypes("Human").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onHuman = com.example.operation_based_interesting_types.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.fromJson(reader,
              customScalarAdapters)
        }

        reader.rewind()
        val _onThingWithName = com.example.operation_based_interesting_types.adapter.TestOperation_ResponseAdapter.Data.Something.OnThingWithName.fromJson(reader,
            customScalarAdapters)

        return TestOperation.Data.ThingWithNameSomething(
          __typename = __typename,
          id = _id!!,
          onHuman = _onHuman,
          onThingWithName = _onThingWithName
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.ThingWithNameSomething,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        if (value.onHuman != null) {
          com.example.operation_based_interesting_types.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.toJson(writer,
              customScalarAdapters, value.onHuman)
        }

        com.example.operation_based_interesting_types.adapter.TestOperation_ResponseAdapter.Data.Something.OnThingWithName.toJson(writer,
            customScalarAdapters, value.onThingWithName)
      }
    }

    public object HumanThingWithNameSomething {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.HumanThingWithNameSomething {
        var __typename: String? = typename
        var _id: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        reader.rewind()
        val _onHuman = com.example.operation_based_interesting_types.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.fromJson(reader,
            customScalarAdapters)

        reader.rewind()
        val _onThingWithName = com.example.operation_based_interesting_types.adapter.TestOperation_ResponseAdapter.Data.Something.OnThingWithName.fromJson(reader,
            customScalarAdapters)

        return TestOperation.Data.HumanThingWithNameSomething(
          __typename = __typename!!,
          id = _id!!,
          onHuman = _onHuman,
          onThingWithName = _onThingWithName
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.HumanThingWithNameSomething,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        com.example.operation_based_interesting_types.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.toJson(writer,
            customScalarAdapters, value.onHuman)

        com.example.operation_based_interesting_types.adapter.TestOperation_ResponseAdapter.Data.Something.OnThingWithName.toJson(writer,
            customScalarAdapters, value.onThingWithName)
      }
    }

    public object Something {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.Something {
        var __typename: String? = typename
        var _id: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onHuman: TestOperation.Data.Something.OnHuman? = null
        if (possibleTypes("Human").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onHuman = com.example.operation_based_interesting_types.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.fromJson(reader,
              customScalarAdapters)
        }

        var _onThingWithName: TestOperation.Data.Something.OnThingWithName? = null
        if (possibleTypes("Human","Human2","Droid").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onThingWithName = com.example.operation_based_interesting_types.adapter.TestOperation_ResponseAdapter.Data.Something.OnThingWithName.fromJson(reader,
              customScalarAdapters)
        }

        return TestOperation.Data.Something(
          __typename = __typename,
          id = _id!!,
          onHuman = _onHuman,
          onThingWithName = _onThingWithName
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.Something,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        if (value.onHuman != null) {
          com.example.operation_based_interesting_types.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.toJson(writer,
              customScalarAdapters, value.onHuman)
        }

        if (value.onThingWithName != null) {
          com.example.operation_based_interesting_types.adapter.TestOperation_ResponseAdapter.Data.Something.OnThingWithName.toJson(writer,
              customScalarAdapters, value.onThingWithName)
        }
      }

      public object OnHuman : Adapter<TestOperation.Data.Something.OnHuman> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestOperation.Data.Something.OnHuman {
          var _name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestOperation.Data.Something.OnHuman(
            name = _name!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.Something.OnHuman,
        ): Unit {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }

      public object OnThingWithName : Adapter<TestOperation.Data.Something.OnThingWithName> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters):
            TestOperation.Data.Something.OnThingWithName {
          var _name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestOperation.Data.Something.OnThingWithName(
            name = _name!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.Something.OnThingWithName,
        ): Unit {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }
    }

    private object SomethingWithoutInterestingType :
        Adapter<TestOperation.Data.SomethingWithoutInterestingType> {
      public val RESPONSE_NAMES: List<String> = listOf("id")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestOperation.Data.SomethingWithoutInterestingType {
        var _id: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestOperation.Data.SomethingWithoutInterestingType(
          id = _id!!
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.SomethingWithoutInterestingType,
      ): Unit {
        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)
      }
    }
  }
}
