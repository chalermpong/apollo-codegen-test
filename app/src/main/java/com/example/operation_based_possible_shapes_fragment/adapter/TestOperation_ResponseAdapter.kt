//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.5.1-SNAPSHOT'.
//
package com.example.operation_based_possible_shapes_fragment.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.operation_based_possible_shapes_fragment.TestOperation
import com.example.operation_based_possible_shapes_fragment.fragment.HumanFragment
import com.example.operation_based_possible_shapes_fragment.fragment.ThingWithNameFragment
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestOperation_ResponseAdapter {
  public object Data : Adapter<TestOperation.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("something", "something2")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.Data {
      var _something: TestOperation.Data.ISomething? = null
      var _something2: TestOperation.Data.ISomething2? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _something = ISomething.obj(true).nullable().fromJson(reader, customScalarAdapters)
          1 -> _something2 = ISomething2.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.Data(
        something = _something,
        something2 = _something2
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.Data,
    ): Unit {
      writer.name("something")
      ISomething.obj(true).nullable().toJson(writer, customScalarAdapters, value.something)

      writer.name("something2")
      ISomething2.obj(true).nullable().toJson(writer, customScalarAdapters, value.something2)
    }

    private object ISomething : Adapter<TestOperation.Data.ISomething> {
      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestOperation.Data.ISomething {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Droid",
          -> DroidSomething.fromJson(reader, customScalarAdapters, __typename)
          "Human",
          -> HumanThingWithNameSomething.fromJson(reader, customScalarAdapters, __typename)
          "Pet",
          -> PetThingWithNameSomething.fromJson(reader, customScalarAdapters, __typename)
          else
          -> Something.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.ISomething,
      ): Unit {
        when(value) {
          is TestOperation.Data.DroidSomething -> DroidSomething.toJson(writer,
              customScalarAdapters, value)
          is TestOperation.Data.HumanThingWithNameSomething ->
              HumanThingWithNameSomething.toJson(writer, customScalarAdapters, value)
          is TestOperation.Data.PetThingWithNameSomething ->
              PetThingWithNameSomething.toJson(writer, customScalarAdapters, value)
          is TestOperation.Data.Something -> Something.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object DroidSomething {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.DroidSomething {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        val _thingWithIDFragment = com.example.operation_based_possible_shapes_fragment.fragment.ThingWithIDFragmentImpl_ResponseAdapter.ThingWithIDFragment.fromJson(reader,
            customScalarAdapters, __typename)

        var _thingWithNameFragment: ThingWithNameFragment? = null
        if (possibleTypes("Human","Pet").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _thingWithNameFragment = com.example.operation_based_possible_shapes_fragment.fragment.ThingWithNameFragmentImpl_ResponseAdapter.ThingWithNameFragment.fromJson(reader,
              customScalarAdapters)
        }

        return TestOperation.Data.DroidSomething(
          __typename = __typename,
          thingWithIDFragment = _thingWithIDFragment,
          thingWithNameFragment = _thingWithNameFragment
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.DroidSomething,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        com.example.operation_based_possible_shapes_fragment.fragment.ThingWithIDFragmentImpl_ResponseAdapter.ThingWithIDFragment.toJson(writer,
            customScalarAdapters, value.thingWithIDFragment)

        if (value.thingWithNameFragment != null) {
          com.example.operation_based_possible_shapes_fragment.fragment.ThingWithNameFragmentImpl_ResponseAdapter.ThingWithNameFragment.toJson(writer,
              customScalarAdapters, value.thingWithNameFragment)
        }
      }
    }

    public object HumanThingWithNameSomething {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.HumanThingWithNameSomething {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        reader.rewind()
        val _thingWithIDFragment = com.example.operation_based_possible_shapes_fragment.fragment.ThingWithIDFragmentImpl_ResponseAdapter.ThingWithIDFragment.fromJson(reader,
            customScalarAdapters, __typename!!)

        reader.rewind()
        val _thingWithNameFragment = com.example.operation_based_possible_shapes_fragment.fragment.ThingWithNameFragmentImpl_ResponseAdapter.ThingWithNameFragment.fromJson(reader,
            customScalarAdapters)

        return TestOperation.Data.HumanThingWithNameSomething(
          __typename = __typename!!,
          thingWithIDFragment = _thingWithIDFragment,
          thingWithNameFragment = _thingWithNameFragment
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.HumanThingWithNameSomething,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        com.example.operation_based_possible_shapes_fragment.fragment.ThingWithIDFragmentImpl_ResponseAdapter.ThingWithIDFragment.toJson(writer,
            customScalarAdapters, value.thingWithIDFragment)

        com.example.operation_based_possible_shapes_fragment.fragment.ThingWithNameFragmentImpl_ResponseAdapter.ThingWithNameFragment.toJson(writer,
            customScalarAdapters, value.thingWithNameFragment)
      }
    }

    public object PetThingWithNameSomething {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.PetThingWithNameSomething {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        reader.rewind()
        val _thingWithIDFragment = com.example.operation_based_possible_shapes_fragment.fragment.ThingWithIDFragmentImpl_ResponseAdapter.ThingWithIDFragment.fromJson(reader,
            customScalarAdapters, __typename!!)

        reader.rewind()
        val _thingWithNameFragment = com.example.operation_based_possible_shapes_fragment.fragment.ThingWithNameFragmentImpl_ResponseAdapter.ThingWithNameFragment.fromJson(reader,
            customScalarAdapters)

        return TestOperation.Data.PetThingWithNameSomething(
          __typename = __typename!!,
          thingWithIDFragment = _thingWithIDFragment,
          thingWithNameFragment = _thingWithNameFragment
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.PetThingWithNameSomething,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        com.example.operation_based_possible_shapes_fragment.fragment.ThingWithIDFragmentImpl_ResponseAdapter.ThingWithIDFragment.toJson(writer,
            customScalarAdapters, value.thingWithIDFragment)

        com.example.operation_based_possible_shapes_fragment.fragment.ThingWithNameFragmentImpl_ResponseAdapter.ThingWithNameFragment.toJson(writer,
            customScalarAdapters, value.thingWithNameFragment)
      }
    }

    public object Something {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.Something {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        val _thingWithIDFragment = com.example.operation_based_possible_shapes_fragment.fragment.ThingWithIDFragmentImpl_ResponseAdapter.ThingWithIDFragment.fromJson(reader,
            customScalarAdapters, __typename)

        var _thingWithNameFragment: ThingWithNameFragment? = null
        if (possibleTypes("Human","Pet").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _thingWithNameFragment = com.example.operation_based_possible_shapes_fragment.fragment.ThingWithNameFragmentImpl_ResponseAdapter.ThingWithNameFragment.fromJson(reader,
              customScalarAdapters)
        }

        return TestOperation.Data.Something(
          __typename = __typename,
          thingWithIDFragment = _thingWithIDFragment,
          thingWithNameFragment = _thingWithNameFragment
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.Something,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        com.example.operation_based_possible_shapes_fragment.fragment.ThingWithIDFragmentImpl_ResponseAdapter.ThingWithIDFragment.toJson(writer,
            customScalarAdapters, value.thingWithIDFragment)

        if (value.thingWithNameFragment != null) {
          com.example.operation_based_possible_shapes_fragment.fragment.ThingWithNameFragmentImpl_ResponseAdapter.ThingWithNameFragment.toJson(writer,
              customScalarAdapters, value.thingWithNameFragment)
        }
      }
    }

    private object ISomething2 : Adapter<TestOperation.Data.ISomething2> {
      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestOperation.Data.ISomething2 {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanSomething2.fromJson(reader, customScalarAdapters, __typename)
          "Droid",
          -> DroidSomething2.fromJson(reader, customScalarAdapters, __typename)
          else
          -> Something2.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.ISomething2,
      ): Unit {
        when(value) {
          is TestOperation.Data.HumanSomething2 -> HumanSomething2.toJson(writer,
              customScalarAdapters, value)
          is TestOperation.Data.DroidSomething2 -> DroidSomething2.toJson(writer,
              customScalarAdapters, value)
          is TestOperation.Data.Something2 -> Something2.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object HumanSomething2 {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.HumanSomething2 {
        var __typename: String? = typename
        var _id: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onDroid: TestOperation.Data.Something2.OnDroid? = null
        if (possibleTypes("Droid").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onDroid = com.example.operation_based_possible_shapes_fragment.adapter.TestOperation_ResponseAdapter.Data.Something2.OnDroid.fromJson(reader,
              customScalarAdapters)
        }

        reader.rewind()
        val _humanFragment = com.example.operation_based_possible_shapes_fragment.fragment.HumanFragmentImpl_ResponseAdapter.HumanFragment.fromJson(reader,
            customScalarAdapters)

        return TestOperation.Data.HumanSomething2(
          __typename = __typename,
          id = _id!!,
          onDroid = _onDroid,
          humanFragment = _humanFragment
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.HumanSomething2,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        if (value.onDroid != null) {
          com.example.operation_based_possible_shapes_fragment.adapter.TestOperation_ResponseAdapter.Data.Something2.OnDroid.toJson(writer,
              customScalarAdapters, value.onDroid)
        }

        com.example.operation_based_possible_shapes_fragment.fragment.HumanFragmentImpl_ResponseAdapter.HumanFragment.toJson(writer,
            customScalarAdapters, value.humanFragment)
      }
    }

    public object DroidSomething2 {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.DroidSomething2 {
        var __typename: String? = typename
        var _id: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        val _onDroid = com.example.operation_based_possible_shapes_fragment.adapter.TestOperation_ResponseAdapter.Data.Something2.OnDroid.fromJson(reader,
            customScalarAdapters)

        var _humanFragment: HumanFragment? = null
        if (possibleTypes("Human").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _humanFragment = com.example.operation_based_possible_shapes_fragment.fragment.HumanFragmentImpl_ResponseAdapter.HumanFragment.fromJson(reader,
              customScalarAdapters)
        }

        return TestOperation.Data.DroidSomething2(
          __typename = __typename,
          id = _id!!,
          onDroid = _onDroid,
          humanFragment = _humanFragment
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.DroidSomething2,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        com.example.operation_based_possible_shapes_fragment.adapter.TestOperation_ResponseAdapter.Data.Something2.OnDroid.toJson(writer,
            customScalarAdapters, value.onDroid)

        if (value.humanFragment != null) {
          com.example.operation_based_possible_shapes_fragment.fragment.HumanFragmentImpl_ResponseAdapter.HumanFragment.toJson(writer,
              customScalarAdapters, value.humanFragment)
        }
      }
    }

    public object Something2 {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.Something2 {
        var __typename: String? = typename
        var _id: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onDroid: TestOperation.Data.Something2.OnDroid? = null
        if (possibleTypes("Droid").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onDroid = com.example.operation_based_possible_shapes_fragment.adapter.TestOperation_ResponseAdapter.Data.Something2.OnDroid.fromJson(reader,
              customScalarAdapters)
        }

        var _humanFragment: HumanFragment? = null
        if (possibleTypes("Human").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _humanFragment = com.example.operation_based_possible_shapes_fragment.fragment.HumanFragmentImpl_ResponseAdapter.HumanFragment.fromJson(reader,
              customScalarAdapters)
        }

        return TestOperation.Data.Something2(
          __typename = __typename,
          id = _id!!,
          onDroid = _onDroid,
          humanFragment = _humanFragment
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.Something2,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        if (value.onDroid != null) {
          com.example.operation_based_possible_shapes_fragment.adapter.TestOperation_ResponseAdapter.Data.Something2.OnDroid.toJson(writer,
              customScalarAdapters, value.onDroid)
        }

        if (value.humanFragment != null) {
          com.example.operation_based_possible_shapes_fragment.fragment.HumanFragmentImpl_ResponseAdapter.HumanFragment.toJson(writer,
              customScalarAdapters, value.humanFragment)
        }
      }

      public object OnDroid : Adapter<TestOperation.Data.Something2.OnDroid> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestOperation.Data.Something2.OnDroid {
          var __typename: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          reader.rewind()
          val _droidFragment = com.example.operation_based_possible_shapes_fragment.fragment.DroidFragmentImpl_ResponseAdapter.DroidFragment.fromJson(reader,
              customScalarAdapters)

          return TestOperation.Data.Something2.OnDroid(
            __typename = __typename!!,
            droidFragment = _droidFragment
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.Something2.OnDroid,
        ): Unit {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          com.example.operation_based_possible_shapes_fragment.fragment.DroidFragmentImpl_ResponseAdapter.DroidFragment.toJson(writer,
              customScalarAdapters, value.droidFragment)
        }
      }
    }
  }
}
