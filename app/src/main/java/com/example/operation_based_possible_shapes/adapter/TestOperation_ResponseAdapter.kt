//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.operation_based_possible_shapes.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.operation_based_possible_shapes.TestOperation
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestOperation_ResponseAdapter {
  public object Data : Adapter<TestOperation.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("something", "somethingWithOnlyOneShape")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.Data {
      var _something: TestOperation.Data.ISomething? = null
      var _somethingWithOnlyOneShape: TestOperation.Data.SomethingWithOnlyOneShape? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _something = ISomething.obj(true).nullable().fromJson(reader, customScalarAdapters)
          1 -> _somethingWithOnlyOneShape = SomethingWithOnlyOneShape.obj().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.Data(
        something = _something,
        somethingWithOnlyOneShape = _somethingWithOnlyOneShape
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.Data,
    ): Unit {
      writer.name("something")
      ISomething.obj(true).nullable().toJson(writer, customScalarAdapters, value.something)

      writer.name("somethingWithOnlyOneShape")
      SomethingWithOnlyOneShape.obj().nullable().toJson(writer, customScalarAdapters,
          value.somethingWithOnlyOneShape)
    }

    private object ISomething : Adapter<TestOperation.Data.ISomething> {
      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestOperation.Data.ISomething {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Droid",
          -> DroidSomething.fromJson(reader, customScalarAdapters, __typename)
          "Human",
          -> HumanThingWithNameSomething.fromJson(reader, customScalarAdapters, __typename)
          "Pet",
          -> PetThingWithNameSomething.fromJson(reader, customScalarAdapters, __typename)
          else
          -> Something.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.ISomething,
      ): Unit {
        when(value) {
          is TestOperation.Data.DroidSomething -> DroidSomething.toJson(writer,
              customScalarAdapters, value)
          is TestOperation.Data.HumanThingWithNameSomething ->
              HumanThingWithNameSomething.toJson(writer, customScalarAdapters, value)
          is TestOperation.Data.PetThingWithNameSomething ->
              PetThingWithNameSomething.toJson(writer, customScalarAdapters, value)
          is TestOperation.Data.Something -> Something.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object DroidSomething {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.DroidSomething {
        var __typename: String? = typename
        var _id: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onHuman: TestOperation.Data.Something.OnHuman? = null
        if (possibleTypes("Human").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onHuman = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.fromJson(reader,
              customScalarAdapters)
        }

        reader.rewind()
        val _onDroid = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnDroid.fromJson(reader,
            customScalarAdapters)

        var _onPet: TestOperation.Data.Something.OnPet? = null
        if (possibleTypes("Pet").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onPet = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.fromJson(reader,
              customScalarAdapters)
        }

        var _onThingWithName: TestOperation.Data.Something.OnThingWithName? = null
        if (possibleTypes("Human","Pet").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onThingWithName = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnThingWithName.fromJson(reader,
              customScalarAdapters)
        }

        return TestOperation.Data.DroidSomething(
          __typename = __typename,
          id = _id!!,
          onHuman = _onHuman,
          onDroid = _onDroid,
          onPet = _onPet,
          onThingWithName = _onThingWithName
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.DroidSomething,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        if (value.onHuman != null) {
          com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.toJson(writer,
              customScalarAdapters, value.onHuman)
        }

        com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnDroid.toJson(writer,
            customScalarAdapters, value.onDroid)

        if (value.onPet != null) {
          com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.toJson(writer,
              customScalarAdapters, value.onPet)
        }

        if (value.onThingWithName != null) {
          com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnThingWithName.toJson(writer,
              customScalarAdapters, value.onThingWithName)
        }
      }
    }

    public object HumanThingWithNameSomething {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.HumanThingWithNameSomething {
        var __typename: String? = typename
        var _id: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        val _onHuman = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.fromJson(reader,
            customScalarAdapters)

        var _onDroid: TestOperation.Data.Something.OnDroid? = null
        if (possibleTypes("Droid").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onDroid = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnDroid.fromJson(reader,
              customScalarAdapters)
        }

        var _onPet: TestOperation.Data.Something.OnPet? = null
        if (possibleTypes("Pet").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onPet = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.fromJson(reader,
              customScalarAdapters)
        }

        reader.rewind()
        val _onThingWithName = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnThingWithName.fromJson(reader,
            customScalarAdapters)

        return TestOperation.Data.HumanThingWithNameSomething(
          __typename = __typename,
          id = _id!!,
          onHuman = _onHuman,
          onDroid = _onDroid,
          onPet = _onPet,
          onThingWithName = _onThingWithName
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.HumanThingWithNameSomething,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.toJson(writer,
            customScalarAdapters, value.onHuman)

        if (value.onDroid != null) {
          com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnDroid.toJson(writer,
              customScalarAdapters, value.onDroid)
        }

        if (value.onPet != null) {
          com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.toJson(writer,
              customScalarAdapters, value.onPet)
        }

        com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnThingWithName.toJson(writer,
            customScalarAdapters, value.onThingWithName)
      }
    }

    public object PetThingWithNameSomething {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.PetThingWithNameSomething {
        var __typename: String? = typename
        var _id: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onHuman: TestOperation.Data.Something.OnHuman? = null
        if (possibleTypes("Human").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onHuman = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.fromJson(reader,
              customScalarAdapters)
        }

        var _onDroid: TestOperation.Data.Something.OnDroid? = null
        if (possibleTypes("Droid").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onDroid = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnDroid.fromJson(reader,
              customScalarAdapters)
        }

        reader.rewind()
        val _onPet = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.fromJson(reader,
            customScalarAdapters)

        reader.rewind()
        val _onThingWithName = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnThingWithName.fromJson(reader,
            customScalarAdapters)

        return TestOperation.Data.PetThingWithNameSomething(
          __typename = __typename,
          id = _id!!,
          onHuman = _onHuman,
          onDroid = _onDroid,
          onPet = _onPet,
          onThingWithName = _onThingWithName
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.PetThingWithNameSomething,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        if (value.onHuman != null) {
          com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.toJson(writer,
              customScalarAdapters, value.onHuman)
        }

        if (value.onDroid != null) {
          com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnDroid.toJson(writer,
              customScalarAdapters, value.onDroid)
        }

        com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.toJson(writer,
            customScalarAdapters, value.onPet)

        com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnThingWithName.toJson(writer,
            customScalarAdapters, value.onThingWithName)
      }
    }

    public object Something {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.Something {
        var __typename: String? = typename
        var _id: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onHuman: TestOperation.Data.Something.OnHuman? = null
        if (possibleTypes("Human").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onHuman = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.fromJson(reader,
              customScalarAdapters)
        }

        var _onDroid: TestOperation.Data.Something.OnDroid? = null
        if (possibleTypes("Droid").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onDroid = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnDroid.fromJson(reader,
              customScalarAdapters)
        }

        var _onPet: TestOperation.Data.Something.OnPet? = null
        if (possibleTypes("Pet").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onPet = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.fromJson(reader,
              customScalarAdapters)
        }

        var _onThingWithName: TestOperation.Data.Something.OnThingWithName? = null
        if (possibleTypes("Human","Pet").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onThingWithName = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnThingWithName.fromJson(reader,
              customScalarAdapters)
        }

        return TestOperation.Data.Something(
          __typename = __typename,
          id = _id!!,
          onHuman = _onHuman,
          onDroid = _onDroid,
          onPet = _onPet,
          onThingWithName = _onThingWithName
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.Something,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        if (value.onHuman != null) {
          com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.toJson(writer,
              customScalarAdapters, value.onHuman)
        }

        if (value.onDroid != null) {
          com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnDroid.toJson(writer,
              customScalarAdapters, value.onDroid)
        }

        if (value.onPet != null) {
          com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.toJson(writer,
              customScalarAdapters, value.onPet)
        }

        if (value.onThingWithName != null) {
          com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnThingWithName.toJson(writer,
              customScalarAdapters, value.onThingWithName)
        }
      }

      public object OnHuman : Adapter<TestOperation.Data.Something.OnHuman> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestOperation.Data.Something.OnHuman {
          var _name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestOperation.Data.Something.OnHuman(
            name = _name!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.Something.OnHuman,
        ): Unit {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }

      public object OnDroid : Adapter<TestOperation.Data.Something.OnDroid> {
        public val RESPONSE_NAMES: List<String> = listOf("build_name", "model_name")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestOperation.Data.Something.OnDroid {
          var _build_name: String? = null
          var _model_name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _build_name = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _model_name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestOperation.Data.Something.OnDroid(
            build_name = _build_name!!,
            model_name = _model_name!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.Something.OnDroid,
        ): Unit {
          writer.name("build_name")
          StringAdapter.toJson(writer, customScalarAdapters, value.build_name)

          writer.name("model_name")
          StringAdapter.toJson(writer, customScalarAdapters, value.model_name)
        }
      }

      public object OnPet : Adapter<TestOperation.Data.Something.OnPet> {
        public val RESPONSE_NAMES: List<String> = listOf("name", "owner")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestOperation.Data.Something.OnPet {
          var _name: String? = null
          var _owner: TestOperation.Data.Something.OnPet.IOwner? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _owner = IOwner.obj(true).fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestOperation.Data.Something.OnPet(
            name = _name!!,
            owner = _owner!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.Something.OnPet,
        ): Unit {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("owner")
          IOwner.obj(true).toJson(writer, customScalarAdapters, value.owner)
        }

        private object IOwner : Adapter<TestOperation.Data.Something.OnPet.IOwner> {
          public override fun fromJson(reader: JsonReader,
              customScalarAdapters: CustomScalarAdapters):
              TestOperation.Data.Something.OnPet.IOwner {
            val __typename = reader.readTypename()
            return when(__typename) {
              "Human",
              -> HumanOwner.fromJson(reader, customScalarAdapters, __typename)
              "Droid",
              -> DroidOwner.fromJson(reader, customScalarAdapters, __typename)
              else
              -> Owner.fromJson(reader, customScalarAdapters, __typename)
            }
          }

          public override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestOperation.Data.Something.OnPet.IOwner,
          ): Unit {
            when(value) {
              is TestOperation.Data.Something.OnPet.HumanOwner -> HumanOwner.toJson(writer,
                  customScalarAdapters, value)
              is TestOperation.Data.Something.OnPet.DroidOwner -> DroidOwner.toJson(writer,
                  customScalarAdapters, value)
              is TestOperation.Data.Something.OnPet.Owner -> Owner.toJson(writer,
                  customScalarAdapters, value)
            }
          }
        }

        public object HumanOwner {
          public val RESPONSE_NAMES: List<String> = listOf("__typename")

          public fun fromJson(
            reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters,
            typename: String,
          ): TestOperation.Data.Something.OnPet.HumanOwner {
            var __typename: String? = typename

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            check(__typename != null) {
              "__typename was not found"
            }

            reader.rewind()
            val _onHuman = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.Owner.OnHuman.fromJson(reader,
                customScalarAdapters)

            var _onDroid: TestOperation.Data.Something.OnPet.Owner.OnDroid? = null
            if (possibleTypes("Droid").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
              reader.rewind()
              _onDroid = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.Owner.OnDroid.fromJson(reader,
                  customScalarAdapters)
            }

            return TestOperation.Data.Something.OnPet.HumanOwner(
              __typename = __typename,
              onHuman = _onHuman,
              onDroid = _onDroid
            )
          }

          public fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestOperation.Data.Something.OnPet.HumanOwner,
          ): Unit {
            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.Owner.OnHuman.toJson(writer,
                customScalarAdapters, value.onHuman)

            if (value.onDroid != null) {
              com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.Owner.OnDroid.toJson(writer,
                  customScalarAdapters, value.onDroid)
            }
          }
        }

        public object DroidOwner {
          public val RESPONSE_NAMES: List<String> = listOf("__typename")

          public fun fromJson(
            reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters,
            typename: String,
          ): TestOperation.Data.Something.OnPet.DroidOwner {
            var __typename: String? = typename

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            check(__typename != null) {
              "__typename was not found"
            }

            var _onHuman: TestOperation.Data.Something.OnPet.Owner.OnHuman? = null
            if (possibleTypes("Human").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
              reader.rewind()
              _onHuman = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.Owner.OnHuman.fromJson(reader,
                  customScalarAdapters)
            }

            reader.rewind()
            val _onDroid = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.Owner.OnDroid.fromJson(reader,
                customScalarAdapters)

            return TestOperation.Data.Something.OnPet.DroidOwner(
              __typename = __typename,
              onHuman = _onHuman,
              onDroid = _onDroid
            )
          }

          public fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestOperation.Data.Something.OnPet.DroidOwner,
          ): Unit {
            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            if (value.onHuman != null) {
              com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.Owner.OnHuman.toJson(writer,
                  customScalarAdapters, value.onHuman)
            }

            com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.Owner.OnDroid.toJson(writer,
                customScalarAdapters, value.onDroid)
          }
        }

        public object Owner {
          public val RESPONSE_NAMES: List<String> = listOf("__typename")

          public fun fromJson(
            reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters,
            typename: String,
          ): TestOperation.Data.Something.OnPet.Owner {
            var __typename: String? = typename

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            check(__typename != null) {
              "__typename was not found"
            }

            var _onHuman: TestOperation.Data.Something.OnPet.Owner.OnHuman? = null
            if (possibleTypes("Human").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
              reader.rewind()
              _onHuman = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.Owner.OnHuman.fromJson(reader,
                  customScalarAdapters)
            }

            var _onDroid: TestOperation.Data.Something.OnPet.Owner.OnDroid? = null
            if (possibleTypes("Droid").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
              reader.rewind()
              _onDroid = com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.Owner.OnDroid.fromJson(reader,
                  customScalarAdapters)
            }

            return TestOperation.Data.Something.OnPet.Owner(
              __typename = __typename,
              onHuman = _onHuman,
              onDroid = _onDroid
            )
          }

          public fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestOperation.Data.Something.OnPet.Owner,
          ): Unit {
            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            if (value.onHuman != null) {
              com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.Owner.OnHuman.toJson(writer,
                  customScalarAdapters, value.onHuman)
            }

            if (value.onDroid != null) {
              com.example.operation_based_possible_shapes.adapter.TestOperation_ResponseAdapter.Data.Something.OnPet.Owner.OnDroid.toJson(writer,
                  customScalarAdapters, value.onDroid)
            }
          }

          public object OnHuman : Adapter<TestOperation.Data.Something.OnPet.Owner.OnHuman> {
            public val RESPONSE_NAMES: List<String> = listOf("id", "name")

            public override fun fromJson(reader: JsonReader,
                customScalarAdapters: CustomScalarAdapters):
                TestOperation.Data.Something.OnPet.Owner.OnHuman {
              var _id: String? = null
              var _name: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
                  1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestOperation.Data.Something.OnPet.Owner.OnHuman(
                id = _id!!,
                name = _name!!
              )
            }

            public override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              `value`: TestOperation.Data.Something.OnPet.Owner.OnHuman,
            ): Unit {
              writer.name("id")
              StringAdapter.toJson(writer, customScalarAdapters, value.id)

              writer.name("name")
              StringAdapter.toJson(writer, customScalarAdapters, value.name)
            }
          }

          public object OnDroid : Adapter<TestOperation.Data.Something.OnPet.Owner.OnDroid> {
            public val RESPONSE_NAMES: List<String> = listOf("id", "build_name", "model_name")

            public override fun fromJson(reader: JsonReader,
                customScalarAdapters: CustomScalarAdapters):
                TestOperation.Data.Something.OnPet.Owner.OnDroid {
              var _id: String? = null
              var _build_name: String? = null
              var _model_name: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
                  1 -> _build_name = StringAdapter.fromJson(reader, customScalarAdapters)
                  2 -> _model_name = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestOperation.Data.Something.OnPet.Owner.OnDroid(
                id = _id!!,
                build_name = _build_name!!,
                model_name = _model_name!!
              )
            }

            public override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              `value`: TestOperation.Data.Something.OnPet.Owner.OnDroid,
            ): Unit {
              writer.name("id")
              StringAdapter.toJson(writer, customScalarAdapters, value.id)

              writer.name("build_name")
              StringAdapter.toJson(writer, customScalarAdapters, value.build_name)

              writer.name("model_name")
              StringAdapter.toJson(writer, customScalarAdapters, value.model_name)
            }
          }
        }
      }

      public object OnThingWithName : Adapter<TestOperation.Data.Something.OnThingWithName> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters):
            TestOperation.Data.Something.OnThingWithName {
          var _name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestOperation.Data.Something.OnThingWithName(
            name = _name!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.Something.OnThingWithName,
        ): Unit {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }
    }

    private object SomethingWithOnlyOneShape : Adapter<TestOperation.Data.SomethingWithOnlyOneShape>
        {
      public val RESPONSE_NAMES: List<String> = listOf("id")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestOperation.Data.SomethingWithOnlyOneShape {
        var _id: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestOperation.Data.SomethingWithOnlyOneShape(
          id = _id!!
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.SomethingWithOnlyOneShape,
      ): Unit {
        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)
      }
    }
  }
}
